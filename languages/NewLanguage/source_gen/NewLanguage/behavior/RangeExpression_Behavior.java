package NewLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.behaviour.BehaviorReflection;

public class RangeExpression_Behavior {
  public static void init(SNode thisNode) {
  }

  public static String call_transform_6625881945441698257(SNode thisNode, SNode nex) {
    if (SNodeOperations.getConceptDeclaration(nex) == SConceptOperations.findConceptDeclaration("NewLanguage.structure.ArgReference")) {
      return "ARG";
    } else if (SNodeOperations.getConceptDeclaration(nex) == SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.EqualsExpression")) {
      SNode eq = (SNode) nex;
      return RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(eq, "left", true)) + "==" + RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(eq, "right", true));
    } else if (SNodeOperations.getConceptDeclaration(nex) == SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.NotEqualsExpression")) {
      SNode neq = (SNode) nex;
      return RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(neq, "left", true)) + "!=" + RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(neq, "right", true));
    } else if (SNodeOperations.getConceptDeclaration(nex) == SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.OrExpression")) {
      SNode orexp = (SNode) nex;
      return RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(orexp, "left", true)) + "||" + RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(orexp, "right", true));
    } else if (SNodeOperations.getConceptDeclaration(nex) == SConceptOperations.findConceptDeclaration("com.mbeddr.core.expressions.structure.AndExpression")) {
      SNode andexp = (SNode) nex;
      return RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(andexp, "left", true)) + "&&" + RangeExpression_Behavior.call_transform_6625881945441698257(thisNode, SLinkOperations.getTarget(andexp, "right", true));
    }
    return (String) BehaviorReflection.invokeVirtual(Object.class, nex, "virtual_evaluateStatically_7863679314024402271", new Object[]{});
  }
}
