package NewLanguage.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class FunctionContract_Behavior {
  public static void init(SNode thisNode) {
    FunctionContract_Behavior.call_makeVars_3598327450488743691(thisNode);
  }

  public static void call_addArgs_2742180936282602292(SNode thisNode) {
    if ((SLinkOperations.getTarget(thisNode, "function", true) == null)) {
      return;
    }
    for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "function", true), "function", false), "arguments", true))) {
      SNode prec = SConceptOperations.createNewNode("NewLanguage.structure.ParameterRange", null);
      SNode argref = SConceptOperations.createNewNode("NewLanguage.structure.ArgReference", null);
      SLinkOperations.setTarget(argref, "Arg", arg, false);
      SLinkOperations.setTarget(prec, "ConditionExp", SConceptOperations.createNewNode("NewLanguage.structure.RangeExpression", null), true);
      ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(thisNode, "preconditions", true), "ParameterRange", true)).addElement(prec);
    }
  }

  public static void call_makeVars_3598327450488743691(SNode thisNode) {
    if (SLinkOperations.getTarget(thisNode, "function", true) == null) {
      return;
    }
    for (SNode arg : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "function", true), "function", false), "arguments", true))) {
      SNode gvd = SConceptOperations.createNewNode("com.mbeddr.core.modules.structure.GlobalVariableDeclaration", null);
      SLinkOperations.setTarget(gvd, "type", SLinkOperations.getTarget(arg, "type", true), true);
      SPropertyOperations.set(gvd, "name", SPropertyOperations.getString(arg, "name"));
      ListSequence.fromList(SLinkOperations.getTargets(((SNode) SNodeOperations.getParent(thisNode)), "contents", true)).addElement(gvd);
    }

  }
}
