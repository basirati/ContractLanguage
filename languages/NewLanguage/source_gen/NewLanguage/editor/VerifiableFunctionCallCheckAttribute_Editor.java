package NewLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.attribute.AttributeKind;

public class VerifiableFunctionCallCheckAttribute_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_sz2uwf_a(editorContext, node);
  }

  private EditorCell createCollection_sz2uwf_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_sz2uwf_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_sz2uwf_a0(editorContext, node));
    editorCell.addEditorCell(this.createAttributedNodeCell_sz2uwf_b0(editorContext, node));
    return editorCell;
  }

  private EditorCell createCollection_sz2uwf_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_sz2uwf_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_sz2uwf_a0a(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_sz2uwf_b0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_sz2uwf_c0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_sz2uwf_d0a(editorContext, node));
    editorCell.addEditorCell(this.createRefCell_sz2uwf_e0a(editorContext, node));
    return editorCell;
  }

  private EditorCell createConstant_sz2uwf_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "[check by ");
    editorCell.setCellId("Constant_sz2uwf_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_sz2uwf_b0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("fcontract");
    provider.setNoTargetText("<no fcontract>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new VerifiableFunctionCallCheckAttribute_Editor._Inline_sz2uwf_a1a0());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("fcontract");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_sz2uwf_a1a0 extends InlineCellProvider {
    public _Inline_sz2uwf_a1a0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createProperty_sz2uwf_a0b0a(editorContext, node);
    }

    private EditorCell createProperty_sz2uwf_a0b0a(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
      provider.setRole("name");
      provider.setNoTargetText("<no name>");
      provider.setReadOnly(true);
      EditorCell editorCell;
      editorCell = provider.createEditorCell(editorContext);
      editorCell.setCellId("property_name");
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }
  }

  private EditorCell createConstant_sz2uwf_c0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "]");
    editorCell.setCellId("Constant_sz2uwf_c0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createConstant_sz2uwf_d0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "to");
    editorCell.setCellId("Constant_sz2uwf_d0a");
    editorCell.setDefaultText("");
    return editorCell;
  }

  private EditorCell createRefCell_sz2uwf_e0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("fcall");
    provider.setNoTargetText("<no fcall>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new VerifiableFunctionCallCheckAttribute_Editor._Inline_sz2uwf_a4a0());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("fcall");
    }
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      IOperationContext opContext = editorContext.getOperationContext();
      EditorManager manager = EditorManager.getInstanceFromContext(opContext);
      return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }

  public static class _Inline_sz2uwf_a4a0 extends InlineCellProvider {
    public _Inline_sz2uwf_a4a0() {
      super();
    }

    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }

    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createCollection_sz2uwf_a0e0a(editorContext, node);
    }

    private EditorCell createCollection_sz2uwf_a0e0a(EditorContext editorContext, SNode node) {
      EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
      editorCell.setCellId("Collection_sz2uwf_a0e0a");
      editorCell.addEditorCell(this.createRefCell_sz2uwf_a0a4a0(editorContext, node));
      return editorCell;
    }

    private EditorCell createRefCell_sz2uwf_a0a4a0(EditorContext editorContext, SNode node) {
      CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
      provider.setRole("function");
      provider.setNoTargetText("<no function>");
      EditorCell editorCell;
      provider.setAuxiliaryCellProvider(new VerifiableFunctionCallCheckAttribute_Editor._Inline_sz2uwf_a4a0._Inline_sz2uwf_a0a0e0a());
      editorCell = provider.createEditorCell(editorContext);
      if (editorCell.getRole() == null) {
        editorCell.setReferenceCell(true);
        editorCell.setRole("function");
      }
      editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
      SNode attributeConcept = provider.getRoleAttribute();
      Class attributeKind = provider.getRoleAttributeClass();
      if (attributeConcept != null) {
        IOperationContext opContext = editorContext.getOperationContext();
        EditorManager manager = EditorManager.getInstanceFromContext(opContext);
        return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
      } else
      return editorCell;
    }

    public static class _Inline_sz2uwf_a0a0e0a extends InlineCellProvider {
      public _Inline_sz2uwf_a0a0e0a() {
        super();
      }

      public EditorCell createEditorCell(EditorContext editorContext) {
        return this.createEditorCell(editorContext, this.getSNode());
      }

      public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
        return this.createProperty_sz2uwf_a0a0a4a0(editorContext, node);
      }

      private EditorCell createProperty_sz2uwf_a0a0a4a0(EditorContext editorContext, SNode node) {
        CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
        provider.setRole("name");
        provider.setNoTargetText("<no name>");
        provider.setReadOnly(true);
        EditorCell editorCell;
        editorCell = provider.createEditorCell(editorContext);
        editorCell.setCellId("property_name_1");
        Style style = new StyleImpl();
        style.set(StyleAttributes.AUTO_DELETABLE, true);
        editorCell.getStyle().putAll(style);
        editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
        SNode attributeConcept = provider.getRoleAttribute();
        Class attributeKind = provider.getRoleAttributeClass();
        if (attributeConcept != null) {
          IOperationContext opContext = editorContext.getOperationContext();
          EditorManager manager = EditorManager.getInstanceFromContext(opContext);
          return manager.createNodeRoleAttributeCell(editorContext, attributeConcept, attributeKind, editorCell);
        } else
        return editorCell;
      }
    }
  }

  private EditorCell createAttributedNodeCell_sz2uwf_b0(EditorContext editorContext, SNode node) {
    IOperationContext opContext = editorContext.getOperationContext();
    EditorManager manager = EditorManager.getInstanceFromContext(opContext);
    EditorCell editorCell = manager.getCurrentAttributedCellWithRole(AttributeKind.Node.class);
    return editorCell;
  }
}
